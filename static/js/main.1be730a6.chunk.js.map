{"version":3,"sources":["colors.js","footer.js","sharingbuttons.js","App.js","index.js"],"names":["colors","Footer","id","className","href","buttonStyle","width","padding","SharingButtons","url","shareText","quote","author","tumblr","title","caption","content","style","defaultProps","i","App","props","getNextQuote","componentDidMount","state","previousQuotes","some","obj","setState","concat","length","getPreviousQuote","undefined","bgColor","color","fetch","then","response","json","data","Math","floor","random","document","body","backgroundColor","catch","error","styles","this","match","onClick","React","Component","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.1be730a6.chunk.js","sourcesContent":["export const colors = [\r\n\t\"aliceblue\", \"azure\", \"aqua\", \"antiquewhite\",\"aquamarine\", \"bisque\", \"blanchedalmond\", \"blueviolet\", \r\n\t\"burlywood\", \"cadetblue\",\"chartreuse\", \"coral\", \"cornflowerblue\", \"cornsilk\", \r\n\t\"cyan\", \"darkslateblue\", \"darkslategray\", \"darkcyan\", \"darkgoldenrod\", \r\n\t\"darkkhaki\", \"darkorange\", \"darkorchid\", \"darksalmon\", \r\n\t\"darkseagreen\", \"darkturquoise\", \"deeppink\", \r\n\t\"deepskyblue\", \"dodgerblue\", \"firebrick\", \"forestgreen\",\"fuchsia\", \"gainsboro\", \r\n\t\"gold\", \"goldenrod\", \"gray\", \"green\", \"greenyellow\", \"honeydew\", \"hotpink\", \"indianred\", \r\n\t\"ivory\", \"khaki\", \"lavenderblush\", \"lawngreen\",\"lemonchiffon\", \"lightblue\", \r\n\t\"lightcoral\", \"lightcyan\", \"lightgoldenrodyellow\", \"lightgray\",\"lightgreen\", \"lightpink\", \r\n\t\"lightsalmon\", \"lightseagreen\", \"lightskyblue\", \"lightslategray\", \"lightsteelblue\", \"lime\", \r\n\t\"limegreen\", \"linen\", \"magenta\", \"mediumorchid\", \"mediumaquamarine\", \r\n\t\"mediumpurple\", \"mediumseagreen\", \"mediumspringgreen\", \"mediumturquoise\", \"mediumvioletred\", \r\n\t\"mistyrose\", \"moccasin\", \"navajowhite\", \"olive\", \"olivedrab\", \"orchid\",\"orange\", \"orangered\",\r\n\t\"palegoldenrod\", \"palegreen\", \"paleturquoise\", \"palevioletred\", \"papayawhip\", \"peachpuff\", \"peru\",\r\n\t\"pink\", \"plum\", \"powderblue\", \"rebeccapurple\", \"red\", \"rosybrown\", \"royalblue\", \r\n\t\"saddlebrown\", \"salmon\", \"sandybrown\", \"seagreen\", \"sienna\", \"silver\", \"skyblue\",\r\n\t\"springgreen\", \"steelblue\", \"tan\", \"teal\", \"thistle\", \"tomato\", \"turquoise\", \"violet\", \"wheat\",\r\n\t\"yellow\", \"yellowgreen\"\r\n\t];\r\n","export const Footer = () => {\r\n\treturn (\r\n\t\t<div id=\"footer\">\r\n\t\t\tAll quotes are sourced from <a className=\"link\" href=\"api.quotable.io/random\">quotable</a>,\r\n      an open source random quotes API created by <strong>lukePeavy</strong>.\r\n    </div>\t\r\n\t\t)\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Facebook from 'react-sharingbuttons/dist/buttons/Facebook';\r\nimport Tumblr from 'react-sharingbuttons/dist/buttons/Tumblr';\r\nimport Twitter from 'react-sharingbuttons/dist/buttons/Twitter';\r\n\r\nconst buttonStyle = {\r\n\twidth: 15,\r\n\tpadding: 5\r\n}\r\n\r\nexport const SharingButtons = ({ quote , author }) => {\r\n\tconst url = \"https://codepen.io/niranad/full/RwpGEGM\";\r\n\tconst shareText = quote + \" -\" + author;\r\n\tconst tumblr = {\r\n\t\ttitle: \"A favorite quote\",\r\n\t\tcaption: shareText,\r\n\t\tcontent: url\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<Twitter id=\"tweet-quote\" url={url} shareText={shareText} />\r\n\t\t\t<Facebook url={url} />\r\n\t\t\t<Tumblr \r\n\t\t\t\tstyle={buttonStyle} url={url} title={tumblr.title} \r\n\t\t\t\tcaption={tumblr.caption} content={tumblr.content}\r\n\t\t\t/>\r\n\t\t</div>\t\r\n\t);\r\n}\r\n\r\nSharingButtons.defaultProps = { quote: \"With wisdom is understanding.\" };\r\nSharingButtons.propTypes = { quote: PropTypes.string.isRequired };\r\n","import React from 'react';\nimport './App.scss';\nimport { colors } from './colors';\nimport { Footer } from './footer';\nimport { SharingButtons } from './sharingbuttons';\n\nlet i = 0; // to be used as an array index\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      quote: \"\",\n      author: \"\",\n      bgColor: \"\",\n      color: 'white',\n      previousQuotes: []\n    }\n  }\n\n  componentDidMount() {\n    fetch(\"https://api.quotable.io/random\")\n    .then(response => response.json())\n    .then(data => {\n      let color = colors[Math.floor(Math.random() * 108)];\n      document.body.style.backgroundColor = color;\n      return this.setState({ \n          quote: data[\"content\"], \n          author: data[\"author\"],\n          bgColor: color,\n          color\n      });\n    })\n    .catch(error => this.setState({\n      quote: \"Error: please check your internet connection\", \n      author: \"Unavailable\"\n    }));\n  } \n\n  getNextQuote = () => {\n    this.componentDidMount();\n    if (!this.state.previousQuotes.some(obj => obj.quote === this.state.quote)) {\n      this.setState(state => ({\n        previousQuotes: state.previousQuotes.concat({\n          quote: state.quote,\n          author: state.author\n        })\n      }));\n    }\n    i = this.state.previousQuotes.length + 1;\n  }\n\n  getPreviousQuote = () => {\n    if (i !== 0 && this.state.previousQuotes.length !== 0) {\n      --i;\n      if (this.state.previousQuotes[i] !== undefined) {\n        this.setState(state => ({\n          quote: state.previousQuotes[i].quote,\n          author: state.previousQuotes[i].author\n        }));\n      } else {\n        this.getPreviousQuote();\n      }\n    }\n  }\n\n  render() {\n    const styles = { \n      backgroundColor: this.state.bgColor, \n      color: \"black\"\n    }\n\n    return (!this.state.quote) ? <h1 id=\"icon\">Loading...</h1> :\n      (\n        <div \n          id=\"container\" \n          className=\"container-fluid\" \n          style={{backgroundColor: this.state.bgColor}}\n        >\n          <div id=\"quote-box\">\n            <q id=\"text\" style={{color: this.state.bgColor}}>{this.state.quote}</q>\n            <p id=\"author\" style={{color: this.state.bgColor}}>-{this.state.author}</p>\n            { \n              this.state.quote && !this.state.author.match(/unavailable/i) &&\n              <div id=\"buttons\">\n                <button \n                  id=\"new-quote\" className=\"btn btn-default\" \n                  style={styles} onClick={this.getNextQuote}\n                >\n                  Next quote\n                </button>\n                <button \n                  id=\"previous-quote\" className=\"btn btn-default\"\n                  style={styles} onClick={this.getPreviousQuote}\n                >\n                  Previous quotes\n                </button>\n                <SharingButtons quote={this.state.quote} author={this.state.author} />\n                \n              </div> \n            }\n          \n          </div>\n          <Footer />\n        </div>\n      );\n  }\n  \n}\n\nexport default App;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport 'font-awesome/css/font-awesome.min.css'\nimport 'react-sharingbuttons'\nimport 'react-sharingbuttons/dist/main.css'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}