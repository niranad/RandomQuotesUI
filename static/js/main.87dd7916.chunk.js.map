{"version":3,"sources":["presentational/colors.js","redux/constants.js","redux/reducers.js","presentational/footer.js","sharingbuttons.js","redux/actions.js","container/App.js","index.js"],"names":["colors","QUOTE_REQUEST_PENDING","QUOTE_REQUEST_SUCCESS","QUOTE_REQUEST_FAILED","GET_PREVIOUS_QUOTE","initialQuoteState","quote","quotes","prevQuoteIdx","textColor","prevTextColors","isPending","isDuplicate","error","Footer","id","className","href","buttonStyle","width","padding","SharingButtons","author","url","shareText","style","title","caption","content","defaultProps","fetchNextQuote","dispatch","type","fetch","then","res","json","payload","quoteRequestSuccess","catch","err","App","this","props","onQuoteRequest","onGetPreviousQuote","styles","backgroundColor","color","errMessage","message","document","body","getElementById","click","Object","keys","length","height","onClick","disabled","Component","Container","connect","state","store","createStore","action","assign","some","Math","floor","random","idx","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode"],"mappings":"6OAqBgBA,EArBD,CACd,YAAa,QAAS,OAAQ,eAAe,aAAc,SAAU,iBAAkB,aACvF,YAAa,YAAY,aAAc,QAAS,iBAAkB,WAClE,OAAQ,gBAAiB,gBAAiB,WAAY,gBACtD,YAAa,aAAc,aAAc,aACzC,eAAgB,gBAAiB,WACjC,cAAe,aAAc,YAAa,cAAc,UAAW,YACnE,OAAQ,YAAa,OAAQ,QAAS,cAAe,WAAY,UAAW,YAC5E,QAAS,QAAS,gBAAiB,YAAY,eAAgB,YAC/D,aAAc,YAAa,uBAAwB,YAAY,aAAc,YAC7E,cAAe,gBAAiB,eAAgB,iBAAkB,iBAAkB,OACpF,YAAa,QAAS,UAAW,eAAgB,mBACjD,eAAgB,iBAAkB,oBAAqB,kBAAmB,kBAC1E,YAAa,WAAY,cAAe,QAAS,YAAa,SAAS,SAAU,YACjF,gBAAiB,YAAa,gBAAiB,gBAAiB,aAAc,YAAa,OAC3F,OAAQ,OAAQ,aAAc,gBAAiB,MAAO,YAAa,YACnE,cAAe,SAAU,aAAc,WAAY,SAAU,SAAU,UACvE,cAAe,YAAa,MAAO,OAAQ,UAAW,SAAU,YAAa,SAAU,QACvF,SAAU,eClBEC,EAAwB,wBACxBC,EAAwB,wBACxBC,EAAuB,uBACvBC,EAAqB,qBCK5BC,EAAoB,CACxBC,MAAO,GACPC,OAAQ,GACRC,aAAc,EACdC,UAAW,QACXC,eAAgB,GAChBC,WAAW,EACXC,aAAa,EACbC,MAAO,I,uEChBIC,EAAS,WACpB,OACE,sBAAKC,GAAG,SAAR,wCAC8B,IAC5B,mBAAGC,UAAU,OAAOC,KAAK,yBAAzB,sBAEK,IAJP,kBAKiB,+CALjB,Q,iDCIEC,EAAc,CACnBC,MAAO,GACPC,QAAS,GAGGC,EAAiB,SAAC,GAAwB,IAAtBf,EAAqB,EAArBA,MAAQgB,EAAa,EAAbA,OAClCC,EAAM,0CAEZ,OACG,gCACE,cAAC,IAAD,CAASR,GAAG,cAAcQ,IAAKA,EAAKC,UAAWlB,EAAQ,KAAOgB,IAC9D,cAAC,IAAD,CAAUC,IAAKA,IACf,cAAC,IAAD,CACEE,MAAOP,EACPK,IAAKA,EACLG,MAAM,oBACNC,QAASrB,EACTsB,QAAO,8BAAyBN,SAMxCD,EAAeQ,aAAe,CAC5BvB,MAAO,gCACPgB,OAAQ,OCxBH,IA2BMQ,EAAiB,kBAAM,SAACC,GACnCA,EA3BO,CACLC,KAAM/B,IA2BRgC,MAAM,kCACHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MACC,SAAC5B,GAAD,OACEyB,EA3B2B,SAACzB,GAClC,MAAO,CACL0B,KAAM9B,EACNmC,QAAS/B,GAwBIgC,CAAoBhC,OAEhCiC,OAAM,SAACC,GAAD,OAAST,EArBX,CACLC,KAAM7B,EACNkC,QAmB4CG,SChB1CC,G,6KACJ,WACEC,KAAKC,MAAMC,mB,oBAGb,WAAU,IAAD,EASHF,KAAKC,MAPPrC,EAFK,EAELA,MACAM,EAHK,EAGLA,YACAD,EAJK,EAILA,UACAiC,EALK,EAKLA,eACA/B,EANK,EAMLA,MACAJ,EAPK,EAOLA,UACAoC,EARK,EAQLA,mBAGIC,EAAS,CACbC,gBAAiBtC,EACjBuC,MAAO,SAGHC,EAAU,UAAMpC,EAAMqC,QAAZ,iEAUhB,OAPAC,SAASC,KAAK3B,MAAMsB,gBAAkBtC,EAGlCG,GACFuC,SAASE,eAAe,cAAcC,QAItC,sBACEvC,GAAG,YACHC,UAAU,kBACVS,MAAO,CAAEsB,gBAAiBtC,GAH5B,UAKiC,IAA9B8C,OAAOC,KAAKlD,GAAOmD,OAClB,qBAAK1C,GAAG,OAAOC,UAAU,kCAEzB,sBAAKD,GAAG,YAAYC,UAAU,SAA9B,UACE,mBAAGD,GAAG,aAAaU,MAAO,CAAEuB,MAAOvC,GAAnC,SACa,KAAVI,EAAeP,EAAK,QAAc2C,IAErC,oBAAGlC,GAAG,eAAeU,MAAO,CAAEuB,MAAOvC,GAArC,cACc,KAAVI,EAAeP,EAAK,OAAa,WAE1B,KAAVO,GACC,sBAAKE,GAAG,UAAR,UACE,wBACEA,GAAG,aACHC,UAAU,kBACVS,MAAQd,EAAqB,CAAEQ,MAAO,GAAIuC,OAAQ,IAA9BZ,EACpBa,QAASf,EACTgB,SAAUjD,EALZ,SAOGA,EAAY,qBAAKK,UAAU,WAAc,eAE5C,wBACED,GAAG,iBACHC,UAAU,kBACVS,MAAOqB,EACPa,QAASd,EACTe,SAAUjD,EALZ,4BASA,cAAC,EAAD,CACEL,MAAOA,EAAK,QACZgB,OAAQhB,EAAK,eAMvB,cAAC,EAAD,W,GA3EUuD,cAmFHC,EAFGC,aApGM,SAACC,GACvB,MAAO,CACL1D,MAAO0D,EAAM1D,MACbC,OAAQyD,EAAMzD,OACdC,aAAcwD,EAAMxD,aACpBG,UAAWqD,EAAMrD,UACjBC,YAAaoD,EAAMpD,YACnBC,MAAOmD,EAAMnD,MACbJ,UAAWuD,EAAMvD,cAIM,SAACsB,GAC1B,MAAO,CACLa,eAAgB,kBAAMb,EAASD,MAC/Be,mBAAoB,kBAAMd,EDMrB,CACLC,KAAM5B,QC8EQ2D,CAA6CtB,GC9FzDwB,EAAQC,aLMc,WAA6C,IAA5CF,EAA2C,uDAAnC3D,EAAmB8D,EAAgB,uDAAP,GAC/D,OAAQA,EAAOnC,MACb,KAAK/B,EACH,OAAOsD,OAAOa,OAAO,GAAIJ,EAAO,CAAErD,WAAW,IAC/C,KAAKT,EAEH,GACG8D,EAAMzD,OAAO8D,MACZ,SAAC/D,GAAD,OAAWA,EAAK,UAAgB6D,EAAO9B,QAAP,WAgBlC,OAAOkB,OAAOa,OAAO,GAAIJ,EAAO,CAC9BrD,WAAW,EACXC,aAAa,EACbC,MAAO,KAhBT,IAAImC,EAAQhD,EAAOsE,KAAKC,MAAsB,IAAhBD,KAAKE,WAEnC,OAAOjB,OAAOa,OAAO,GAAIJ,EAAO,CAC9BzD,OAAO,GAAD,mBAAMyD,EAAMzD,QAAZ,CAAoB4D,EAAO9B,UACjC/B,MAAO6D,EAAO9B,QACd7B,aAAcwD,EAAMzD,OAAOkD,OAC3BhD,UAAWuC,EACXtC,eAAe,GAAD,mBAAMsD,EAAMtD,gBAAZ,CAA4BsC,IAC1CrC,WAAW,EACXC,aAAa,EACbC,MAAO,KASb,KAAKV,EACH,OAAOoD,OAAOa,OAAO,GAAIJ,EAAO,CAC9BnD,MAAOsD,EAAO9B,QACd1B,WAAW,IAEf,KAAKP,EACH,IAAIqE,EAAMT,EAAMxD,aAAe,EAAIwD,EAAMxD,aAAe,EAAI,EAC5D,OAAO+C,OAAOa,OAAO,GAAIJ,EAAO,CAC9BxD,aAAciE,EACdnE,MAAO0D,EAAMzD,OAAOkE,GACpBhE,UAAWuD,EAAMtD,eAAe+D,KAEpC,QACE,OAAOT,KKjD2BU,YAAgBC,MAExDC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUb,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJd,SAASE,eAAe,W","file":"static/js/main.87dd7916.chunk.js","sourcesContent":["const colors = [\r\n\t\"aliceblue\", \"azure\", \"aqua\", \"antiquewhite\",\"aquamarine\", \"bisque\", \"blanchedalmond\", \"blueviolet\", \r\n\t\"burlywood\", \"cadetblue\",\"chartreuse\", \"coral\", \"cornflowerblue\", \"cornsilk\", \r\n\t\"cyan\", \"darkslateblue\", \"darkslategray\", \"darkcyan\", \"darkgoldenrod\", \r\n\t\"darkkhaki\", \"darkorange\", \"darkorchid\", \"darksalmon\", \r\n\t\"darkseagreen\", \"darkturquoise\", \"deeppink\", \r\n\t\"deepskyblue\", \"dodgerblue\", \"firebrick\", \"forestgreen\",\"fuchsia\", \"gainsboro\", \r\n\t\"gold\", \"goldenrod\", \"gray\", \"green\", \"greenyellow\", \"honeydew\", \"hotpink\", \"indianred\", \r\n\t\"ivory\", \"khaki\", \"lavenderblush\", \"lawngreen\",\"lemonchiffon\", \"lightblue\", \r\n\t\"lightcoral\", \"lightcyan\", \"lightgoldenrodyellow\", \"lightgray\",\"lightgreen\", \"lightpink\", \r\n\t\"lightsalmon\", \"lightseagreen\", \"lightskyblue\", \"lightslategray\", \"lightsteelblue\", \"lime\", \r\n\t\"limegreen\", \"linen\", \"magenta\", \"mediumorchid\", \"mediumaquamarine\", \r\n\t\"mediumpurple\", \"mediumseagreen\", \"mediumspringgreen\", \"mediumturquoise\", \"mediumvioletred\", \r\n\t\"mistyrose\", \"moccasin\", \"navajowhite\", \"olive\", \"olivedrab\", \"orchid\",\"orange\", \"orangered\",\r\n\t\"palegoldenrod\", \"palegreen\", \"paleturquoise\", \"palevioletred\", \"papayawhip\", \"peachpuff\", \"peru\",\r\n\t\"pink\", \"plum\", \"powderblue\", \"rebeccapurple\", \"red\", \"rosybrown\", \"royalblue\", \r\n\t\"saddlebrown\", \"salmon\", \"sandybrown\", \"seagreen\", \"sienna\", \"silver\", \"skyblue\",\r\n\t\"springgreen\", \"steelblue\", \"tan\", \"teal\", \"thistle\", \"tomato\", \"turquoise\", \"violet\", \"wheat\",\r\n\t\"yellow\", \"yellowgreen\"\r\n\t];\r\n\r\n\texport default colors;","export const QUOTE_REQUEST_PENDING = 'QUOTE_REQUEST_PENDING';\r\nexport const QUOTE_REQUEST_SUCCESS = 'QUOTE_REQUEST_SUCCESS';\r\nexport const QUOTE_REQUEST_FAILED = 'QUOTE_REQUEST_FAILED';\r\nexport const GET_PREVIOUS_QUOTE = 'GET_PREVIOUS_QUOTE';\r\n","import colors from '../presentational/colors';\r\nimport {\r\n  QUOTE_REQUEST_PENDING,\r\n  QUOTE_REQUEST_SUCCESS,\r\n  QUOTE_REQUEST_FAILED,\r\n  GET_PREVIOUS_QUOTE,\r\n} from './constants';\r\n\r\nconst initialQuoteState = {\r\n  quote: {},\r\n  quotes: [],\r\n  prevQuoteIdx: 0,\r\n  textColor: 'white',\r\n  prevTextColors: [],\r\n  isPending: false,\r\n  isDuplicate: false,\r\n  error: '',\r\n};\r\n\r\nexport const quoteReducer = (state = initialQuoteState, action = {}) => {\r\n  switch (action.type) {\r\n    case QUOTE_REQUEST_PENDING:\r\n      return Object.assign({}, state, { isPending: true });\r\n    case QUOTE_REQUEST_SUCCESS:\r\n      // if the fetched quote is not duplicate\r\n      if (\r\n        !state.quotes.some(\r\n          (quote) => quote['content'] === action.payload['content'],\r\n        )\r\n      ) {\r\n        let color = colors[Math.floor(Math.random() * 108)];\r\n\r\n        return Object.assign({}, state, {\r\n          quotes: [...state.quotes, action.payload],\r\n          quote: action.payload,\r\n          prevQuoteIdx: state.quotes.length,\r\n          textColor: color,\r\n          prevTextColors: [...state.prevTextColors, color],\r\n          isPending: false,\r\n          isDuplicate: false,\r\n          error: '',\r\n        });\r\n      } else {\r\n        return Object.assign({}, state, {\r\n          isPending: false,\r\n          isDuplicate: true,\r\n          error: '',\r\n        });\r\n      }\r\n    case QUOTE_REQUEST_FAILED:\r\n      return Object.assign({}, state, {\r\n        error: action.payload,\r\n        isPending: false,\r\n      });\r\n    case GET_PREVIOUS_QUOTE:\r\n      let idx = state.prevQuoteIdx > 0 ? state.prevQuoteIdx - 1 : 0;\r\n      return Object.assign({}, state, {\r\n        prevQuoteIdx: idx,\r\n        quote: state.quotes[idx],\r\n        textColor: state.prevTextColors[idx],\r\n      });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","export const Footer = () => {\r\n  return (\r\n    <div id='footer'>\r\n      All quotes are fetched from{' '}\r\n      <a className='link' href='api.quotable.io/random'>\r\n        Quotable\r\n      </a>{' '}\r\n      API created by <strong>lukePeavy</strong>.\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Facebook from 'react-sharingbuttons/dist/buttons/Facebook';\r\nimport Tumblr from 'react-sharingbuttons/dist/buttons/Tumblr';\r\nimport Twitter from 'react-sharingbuttons/dist/buttons/Twitter';\r\n\r\nconst buttonStyle = {\r\n\twidth: 15,\r\n\tpadding: 5\r\n}\r\n\r\nexport const SharingButtons = ({ quote , author }) => {\r\n\tconst url = 'https://niranad.github.io/random-quotes';\r\n\r\n\treturn (\r\n    <div>\r\n      <Twitter id='tweet-quote' url={url} shareText={quote + ' -' + author} />\r\n      <Facebook url={url} />\r\n      <Tumblr\r\n        style={buttonStyle}\r\n        url={url}\r\n        title='Quote of the day!'\r\n        caption={quote}\r\n        content={`A favorite quote by ${author}`}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nSharingButtons.defaultProps = {\r\n  quote: 'With wisdom is understanding.',\r\n  author: 'God',\r\n};\r\nSharingButtons.propTypes = { quote: PropTypes.string.isRequired };\r\n","import {\r\n  QUOTE_REQUEST_PENDING,\r\n  QUOTE_REQUEST_SUCCESS,\r\n  QUOTE_REQUEST_FAILED,\r\n  GET_PREVIOUS_QUOTE,\r\n} from './constants';\r\n\r\nexport const quoteRequestPending = () => {\r\n  return {\r\n    type: QUOTE_REQUEST_PENDING,\r\n  };\r\n};\r\n\r\nexport const quoteRequestSuccess = (quote) => {\r\n  return {\r\n    type: QUOTE_REQUEST_SUCCESS,\r\n    payload: quote,\r\n  };\r\n};\r\n\r\nexport const quoteRequestFailed = (error) => {\r\n  return {\r\n    type: QUOTE_REQUEST_FAILED,\r\n    payload: error,\r\n  };\r\n};\r\n\r\nexport const getPreviousQuote = () => {\r\n  return {\r\n    type: GET_PREVIOUS_QUOTE,\r\n  };\r\n};\r\n\r\n// async action creator\r\nexport const fetchNextQuote = () => (dispatch) => {\r\n  dispatch(quoteRequestPending());\r\n  fetch('https://api.quotable.io/random')\r\n    .then((res) => res.json())\r\n    .then(\r\n      (quote) =>\r\n        dispatch(quoteRequestSuccess(quote)),\r\n    )\r\n    .catch((err) => dispatch(quoteRequestFailed(err)));\r\n};\r\n","import { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Footer } from '../presentational/footer';\nimport { SharingButtons } from '../sharingbuttons';\nimport { fetchNextQuote, getPreviousQuote } from '../redux/actions';\nimport './App.css';\n\nconst mapStateToProps = (state) => {\n  return {\n    quote: state.quote,\n    quotes: state.quotes,\n    prevQuoteIdx: state.prevQuoteIdx,\n    isPending: state.isPending,\n    isDuplicate: state.isDuplicate,\n    error: state.error,\n    textColor: state.textColor,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onQuoteRequest: () => dispatch(fetchNextQuote()),\n    onGetPreviousQuote: () => dispatch(getPreviousQuote()),\n  };\n};\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onQuoteRequest();\n  }\n\n  render() {\n    const {\n      quote,\n      isDuplicate,\n      isPending,\n      onQuoteRequest,\n      error,\n      textColor,\n      onGetPreviousQuote,\n    } = this.props;\n\n    const styles = {\n      backgroundColor: textColor,\n      color: 'black',\n    };\n\n    const errMessage = `${error.message}: Please check your internet connection and refresh the page.`;\n\n    // change body background color as the textColor changes\n    document.body.style.backgroundColor = textColor;\n\n    // if the fetched quote has been previously fetched, trigger another fetch\n    if (isDuplicate) {\n      document.getElementById('next-quote').click();\n    }\n\n    return (\n      <div\n        id='container'\n        className='container-fluid'\n        style={{ backgroundColor: textColor }}\n      >\n        {Object.keys(quote).length === 0 ? (\n          <div id='icon' className='container-fluid loader center'></div>\n        ) : (\n          <div id='quote-box' className='center'>\n            <q id='quote-text' style={{ color: textColor }}>\n              {error === '' ? quote['content'] : errMessage}\n            </q>\n            <p id='quote-author' style={{ color: textColor }}>\n              -{error === '' ? quote['author'] : 'Error'}\n            </p>\n            {error === '' && (\n              <div id='buttons'>\n                <button\n                  id='next-quote'\n                  className='btn btn-default'\n                  style={!isPending ? styles : { width: 50, height: 40 }}\n                  onClick={onQuoteRequest}\n                  disabled={isPending}\n                >\n                  {isPending ? <div className='loader' /> : 'Next quote'}\n                </button>\n                <button\n                  id='previous-quote'\n                  className='btn btn-default'\n                  style={styles}\n                  onClick={onGetPreviousQuote}\n                  disabled={isPending}\n                >\n                  Previous quote\n                </button>\n                <SharingButtons\n                  quote={quote['content']}\n                  author={quote['author']}\n                />\n              </div>\n            )}\n          </div>\n        )}\n        <Footer />\n      </div>\n    );\n  }\n}\n\nconst Container = connect(mapStateToProps, mapDispatchToProps)(App);\n\nexport default Container;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { quoteReducer } from './redux/reducers';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport 'react-sharingbuttons';\nimport 'react-sharingbuttons/dist/main.css';\nimport Container from './container/App';\n\nconst store = createStore(quoteReducer, applyMiddleware(thunkMiddleware));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Container />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n"],"sourceRoot":""}